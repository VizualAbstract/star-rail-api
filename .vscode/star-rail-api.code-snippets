{
  "StarRailClient": {
    "scope": "typescript",
    "prefix": "starRailClient",
    "body": [
      "import QueryBuilder, { Config, QueryOptions } from '@/QueryBuilder';",
      "import { Resources } from '@/enum';",
      "import { ${1:RESOURCE_TYPE} } from '@/types';",
      "",
      "// Replace FieldClient with the desired client",
      "import { FieldClient } from '@/clients/FieldClient';",
      "",
      "export class $TM_FILENAME_BASE extends QueryBuilder<${1:RESOURCE_TYPE}> {",
      "  // Example auxiliary client to fetch reference data",
      "  private fieldClient?: FieldClient;",
      "",
      "  // Example of enriching query with data from another resource",
      "  protected options: QueryOptions = {",
      "    includeField: false,",
      "    includeFieldList: false,",
      "    withImages: false,",
      "  };",
      "",
      "  constructor(options?: Config) {",
      "    // Adjust the resource enum as needed",
      "    super({ ...options, resource: Resources.${2:RESOURCE_ENUM} });",
      "  }",
      "",
      "  async getByID(id: string | number): Promise<${1:RESOURCE_TYPE}> {",
      "    let item = await super.getByID(id);",
      "",
      "    if (this.options.includeField) {",
      "      item = await this.populateField(item);",
      "    }",
      "",
      "    if (this.options.includeFieldList) {",
      "      item = await this.populateFieldList([item]);",
      "    }",
      "",
      "    if (this.options.withImages) {",
      "      item = await this.injectImagePaths(item);",
      "    }",
      "",
      "    return item;",
      "  }",
      "",
      "  async getByName(name: string): Promise<${1:RESOURCE_TYPE} | undefined> {",
      "    const items = await this.list();",
      "    let item = items.find((item) => item.name === name);",
      "",
      "    if (!item) {",
      "      return item;",
      "    }",
      "",
      "    if (item && this.options.includeField) {",
      "      item = await this.populateField(item);",
      "    }",
      "",
      "    if (this.options.includeFieldList) {",
      "      const item = await this.populateFieldList([item]);",
      "      item = items[0];",
      "    }",
      "",
      "    if (item && this.options.withImages) {",
      "      item = await this.injectImagePaths(item);",
      "    }",
      "",
      "    return item;",
      "  }",
      "",
      "  async list(): Promise<${1:RESOURCE_TYPE}[]> {",
      "    let items = await super.list();",
      "",
      "    if (this.options.includeField) {",
      "      items = await Promise.all(items.map((item) => this.populateField(item)));",
      "    }",
      "",
      "    if (this.options.includeImagePaths) {",
      "      items = await Promise.all(items.map((item) => this.injectImagePaths(item)));",
      "    }",
      "",
      "    return items;",
      "  }",
      "",
      "  // Example of chaining methods to enable additional resource data",
      "  withField(): $TM_FILENAME_BASE {",
      "    this.options.includeField = true;",
      "    this.getFieldClient();",
      "",
      "    return this;",
      "  }",
      "",
      "  withImages(): $TM_FILENAME_BASE {",
      "    this.includeImagePaths = true;",
      "    return this;",
      "  }",
      "",
      "  withOptions(options: QueryOptions): CharacterQuery {",
      "    this.options = { ...this.options, ...options };",
      "",
      "    Object.keys(options).forEach((optionKey) => {",
      "      if (options[optionKey]) {",
      "        switch (optionKey) {",
      "          case 'withField':",
      "            this.withRanks();",
      "            break;",
      "        }",
      "      }",
      "    });",
      "  }",
      "",
      "  // Example of initializing an additional client to fetch reference data",
      "  private getFieldClient(): FieldClient {",
      "    if (!this.fieldClient) {",
      "      this.fieldClient = new FieldClient(this.options);",
      "    }",
      "  ",
      "    return this.fieldClient;",
      "  }",
      "",
      "  private async populateField(item: ${1:RESOURCE_TYPE}): Promise<${1:RESOURCE_TYPE}> {",
      "    // Enrich data with additional queries, appending the fetched reference data",
      "    if (this.fieldClient) {",
      "      const fields = await this.fieldClient.get();",
      "",
      "      item._fields = item.fields.map((field) => fields[field.id]);",
      "    }",
      "    ",
      "    return items;",
      "  }",
      "",
      "  // A more optimized implementation of the above method",
      "  private async populateFieldList(items: ${1:RESOURCE_TYPE}[]): Promise<${1:RESOURCE_TYPE}[]> {",
      "    // Enrich data with additional queries, appending the fetched reference data",
      "    if (this.fieldClient) {",
      "      const fieldClient = await this.fieldClient",
      "",
      "      if (this.options.withFieldList) {",
      "        fieldClient.withFields();",
      "      }",
      "",
      "      const fields = await this.fieldClient.get()",
      "",
      "      items.map((i) => ({ ...i, _fields: fields[i.id] }));",
      "    }",
      "    ",
      "    return item;",
      "  }",
      "}",
    ],
    "description": "Generates boilerplate to create a new StarRailAPI Client.",
  },
}
