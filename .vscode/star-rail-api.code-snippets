{
  "StarRailClient": {
    scope: "typescript",
    "prefix": "starRailClient",
    "body": [
      "import BaseClient, { ClientOptions } from 'BaseClient';",
      "import { Resources } from 'enum';",
      "import { RESOURCE_TYPE } from 'types';",
      "",
      "export class $TM_FILENAME_BASE extends BaseClient<RESOURCE_TYPE> {",
      "  private fetchOption: boolean = false;",
      "",
      "  constructor(options?: ClientOptions) {",
      "    super({ ...options, resource: Resources.RESOURCE_ENUM });",
      "",
      "    this.options = { ...options, resource: Resources.RESOURCE_ENUM };",
      "  }",
      "",
      "  withOption(): $TM_FILENAME_BASE {",
      "    this.fetchOption = true;",
      "    return this;",
      "  }",
      "",
      "  async getByID(id: string | number): Promise<RESOURCE_TYPE> {",
      "    let item = await super.getByID(id);",
      "",
      "    if (this.fetchOption) {",
      "      item = await this.populateOption(item);",
      "    }",
      "",
      "    return item;",
      "  }",
      "",
      "  async getByName(name: string): Promise<RESOURCE_TYPE | undefined> {",
      "    const items = await this.list();",
      "    let item = items.find((item) => item.name === name);",
      "",
      "    if (!item) {",
      "      return item;",
      "    }",
      "",
      "    if (item && this.fetchOption) {",
      "      item = await this.populateOption(item);",
      "    }",
      "",
      "    return item;",
      "  }",
      "",
      "  async list(): Promise<RESOURCE_TYPE[]> {",
      "    let items = await super.list();",
      "",
      "    if (this.fetchOption) {",
      "      items = await Promise.all(items.map((item) => this.populateOption(item)));",
      "    }",
      "",
      "    return items;",
      "  }",
      "",
      "  private async populateOption(item: RESOURCE_TYPE): Promise<RESOURCE_TYPE> {",
      "    // Perform operation",
      "    return item;",
      "  }",
      "}"
    ],
    "description": "Generates boilerplate to reate a new StarRailAPI Client."
  }
}